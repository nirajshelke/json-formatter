const Datatable = require('pageobjects/datatable');
const Button = require('pageobjects/button');

const tableTypes = {
    default: '[data-render-mode="default"]',
    roleBased: '[data-render-mode="role-based"]',
};

describe('Datatable UTAM Page Object Tests', () => {
    Object.keys(tableTypes).forEach((type) => {
        describe(`${type} table`, () => {
            const TABLE_SELECTOR = tableTypes[type];

            let root;

            beforeEach(async () => {
                await browser.url('/datatable/utam');
                root = await $('datatable-utam');
                await root.waitForDisplayed();
            });

            it('should get the cell value by row and column index', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                const cellValue = await datatable.getCellValueByIndex(1, 2);
                expect(cellValue).toBe('Billy Simmons');
            });
            it('should get the cell value by row index and column label', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                const cellValue = await datatable.getCellValueByLabel(2, 'Age');
                expect(cellValue).toBe('35');
            });
            it('should get the number of rows in the table', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                const cellValue = await datatable.getNumRows();
                expect(cellValue).toBe(4);
            });
            it('should tell if the table has any rows', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                const cellValue = await datatable.hasRows();
                expect(cellValue).toBe(true);
            });
            it('should toggle selection of row - comprehensive', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                for (let i = 1; i <= 4; i++) {
                    expect(await datatable.isRowSelected(i)).toBe('false');
                }

                await datatable.toggleRowSelection(1);
                expect(await datatable.isRowSelected(1)).toBe('true');
                [2, 3, 4].forEach(async (i) => {
                    expect(await datatable.isRowSelected(i)).toBe('false');
                });

                await datatable.toggleRowSelection(2);
                expect(await datatable.isRowSelected(2)).toBe('true');
                [3, 4].forEach(async (i) => {
                    expect(await datatable.isRowSelected(i)).toBe('false');
                });

                await datatable.toggleRowSelection(3);
                expect(await datatable.isRowSelected(3)).toBe('true');
                expect(await datatable.isRowSelected(4)).toBe('false');

                await datatable.toggleRowSelection(4);
                expect(await datatable.isRowSelected(4)).toBe('true');
            });
            it('should toggle selection of row', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                await datatable.toggleRowSelection(3);
                expect(await datatable.isRowSelected(3)).toBe('true');

                await datatable.toggleRowSelection(3);
                expect(await datatable.isRowSelected(3)).toBe('false');
            });
            it('should get the number of selected rows when not all rows are selected', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                await datatable.toggleRowSelection(3);
                expect(await datatable.getNumSelectedRows()).toBe(1);

                await datatable.toggleRowSelection(2);
                expect(await datatable.getNumSelectedRows()).toBe(2);
            });
            it('should get the number of selected rows when all rows are selected', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                await datatable.clickSelectAllCheckbox();
                expect(await datatable.getNumSelectedRows()).toBe(4);
            });
            it('should get the number of columns in the table', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.getNumColumns()).toBe(5);
            });
            it('should tell whether or not a column is sortable', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.isSortableColumn('Age')).toBe(true);

                // Need to speak to UTAM (about isPresent) or find a better way to write this method
                // If column is not sortable, the test fails with the error:
                // "Can't find elements with locator 'lightning-primitive-header-factory.slds-is-sortable' inside its scope element."
                // expect(await datatable.isSortableColumn('Name')).toBe(false);
            });
            it('should tell whether or not the row is selectable', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.isSelectableRow(1)).toBe(true);
            });
            it('should get the width of a column', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                const datatableElement = await root.shadow$(
                    'lightning-datatable'
                );
                const columnHeader = await datatableElement.shadow$(
                    '[aria-label="Name"]'
                );

                // Remove intermediate white spaces
                let expectedWidth = await columnHeader.getAttribute('style');
                expectedWidth = expectedWidth.replace(/\s/g, '');
                let actualWidth = await datatable.getWidth('Name');
                actualWidth = actualWidth.replace(/\s/g, '');

                // Using indexOf in case of presence of ';'
                expect(actualWidth.indexOf(expectedWidth) >= 0).toBe(true);
            });
            it('should tell whether or not a column has header actions', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.hasHeaderActions('Name')).toBe(true);
                expect(await datatable.hasHeaderActions('Age')).toBe(true);
                // false fails; need to check for true or null; check with UTAM if expected
                expect(await datatable.hasHeaderActions('Email')).toBe(null);
            });
            it('should get the text of the rowheader cell of the specified row', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.getRowHeaderText(2)).toBe(
                    'Kelsey Denesik'
                );
            });
            it('should click column header of the sortable column', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                let cellValue = await datatable.getCellValueByLabel(1, 'Age');
                expect(cellValue).toBe('40');

                await datatable.clickSortHeaderButton('Age');

                cellValue = await datatable.getCellValueByLabel(1, 'Age');
                expect(cellValue).toBe('35');
            });
            it('should tell whether the specified row has row actions or not', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.hasRowActionInRow(2)).toBe(true);
            });
            it('should tell whether or not the datatable has the loading indicator visible', async () => {
                const datatable = await utam.load(Datatable, {
                    element: await root.shadow$(TABLE_SELECTOR),
                });

                expect(await datatable.isLoading()).toBe(false);

                const button = await utam.load(Button, {
                    element: await root.shadow$('lightning-button'),
                });
                await button.click();

                expect(await datatable.isLoading()).toBe(true);
            });
        });
    });
});
